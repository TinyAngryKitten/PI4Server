version: "3.7"

networks:
  proxy:
    external: true

services:
  traefik:
    image: traefik:1.7.23
    ports:
      - target: 80
        published: 80
        mode: host
      - target: 8080 #dashboard
        published: 8080
        mode: host
      #- target: 443
      #  published: 443
      #  mode: host
    command:
      #- --api.insecure=true # set to 'false' on production
      - --api=true
      - --api.dashboard=true # see https://docs.traefik.io/v2.0/operations/dashboard/#secure-mode for how to secure the dashboard
      #- --api.debug=true # enable additional endpoints for debugging and profiling
      #- --log.level=DEBUG # debug while we get it working, for more levels/info see https://docs.traefik.io/observability/logs/
      #- --providers.docker=true
      #- --providers.docker.swarmMode=true
      #- --providers.docker.exposedbydefault=true
      #- --providers.docker.network=proxy
      - --consul=true
      - --consul.endpoint=127.0.0.1:8500
      #- --entrypoints.web.address=:80
      #- --entrypoints.web-secured.address=:443
      #- --certificatesresolvers.mytlschallenge.acme.httpChallenge.entrypoint=web
      #- --certificatesresolvers.mytlschallenge.acme.email=you@whatever.com
      #- --certificatesresolvers.mytlschallenge.acme.storage=/letsencrypt/acme.json
    #volumes:
      #- letsencrypt:/letsencrypt
      #- /var/run/docker.sock:/var/run/docker.sock
    deploy:
      placement:
        constraints:
          - node.role == manager
      labels:
        - "traefik.enable=true"
        - "traefik.http.routers.api.rule=Host(`traefik.localhost`)"
        - "traefik.http.routers.api.service=api@internal" # Let the dashboard access the traefik api

  consul:
    image: consul:latest
    deploy:
      placement:
        constraints:
          - node.role == manager
    ports:
      - target: 8500
        published: 8500
        mode: host

volumes:
  letsencrypt:
